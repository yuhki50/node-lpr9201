var chai = require('chai');
var expect = chai.expect;
var module = require('../lib');
var Sender = module.Sender;


describe('sender', function() {
	beforeEach(function() {
    // テストクラスのインスタンス
    this.sender = new Sender();

    // Senderで処理するデータを保存する
    var senderBuffer = [];

    var self = this;
		this.sender.setSender(function(data) {
      self.senderBuffer = data;
		});
	});

	it('connectionConfirmation', function() {
		this.sender.connectionConfirmation();
    expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x00, 0x00, 0xFF]);
	});

	it('dataTransmissionWithoutOption', function() {
		this.sender.dataTransmission(1000, [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39], false, false, false);
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x01, 0x00, 0x0D, 0x00, 0x03, 0xE8, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x19]);
  });

	it('dataTransmissionWithAckOption', function() {
		this.sender.dataTransmission(1000, [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39], true, false, false);
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x01, 0x00, 0x0D, 0x01, 0x03, 0xE8, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x18]);
	});

	it('dataTransmission', function() {
		this.sender.dataTransmission(1000, [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39], false, true, false);
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x01, 0x00, 0x0D, 0x02, 0x03, 0xE8, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x1B]);
	});

	it('dataTransmissionWithBroadcastOption', function() {
		this.sender.dataTransmission(1000, [0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39], false, false, true);
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x01, 0x00, 0x0D, 0x04, 0x03, 0xE8, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x1D]);
	});

	it('writeProfileParameterSize1Byte', function() {
		this.sender.writeProfileParameter(0x03, 33);  // チャンネルに33を設定
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x02, 0x02, 0x03, 0x21, 0xDD]);
	});

	it('writeProfileParameterSize2Byte', function() {
		this.sender.writeProfileParameter(0x01, 1000);  // PAN IDに1000を設定
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x02, 0x03, 0x01, 0x03, 0xE8, 0x14]);
	});

	it('writeProfileParameterSize8Byte', function() {
		this.sender.writeProfileParameter(0x15, 0x0000000000000001);  // 親IEEEアドレスに0x0000000000000001を設定
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x02, 0x09, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0xE1]);
	});

	it('readProfileParameter', function() {
		this.sender.readProfileParameter(0x01);  // PAN IDを読み込み
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x03, 0x01, 0x01, 0xFC]);
	});

	it('readReceiveData', function() {
		this.sender.readReceiveData();
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x04, 0x00, 0xFB]);
	});

	it('readRssiData', function() {
		this.sender.readRssiData();
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x05, 0x00, 0xFA]);
	});

	it('writeProfile', function() {
		this.sender.writeProfile(0);
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x06, 0x01, 0x00, 0xF8]);
	});

	it('readProfile', function() {
		this.sender.readProfile(0);
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x07, 0x01, 0x00, 0xF9]);
	});

	it('resetProfile', function() {
		this.sender.resetProfile();
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x08, 0x00, 0xF7]);
	});

	it('sleep', function() {
		this.sender.sleep();
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x09, 0x00, 0xF6]);
	});

	it('sleepInterval', function() {
		this.sender.sleepInterval(300, 100);
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x0A, 0x03, 0x01, 0x2C, 0x64, 0xBF]);
	});

	it('activateRequest', function() {
		this.sender.activateRequest();
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x0B, 0x00, 0xF4]);
	});

	it('edScan', function() {
		this.sender.edScan();
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x0C, 0x00, 0xF3]);
	});

	it('reset', function() {
		this.sender.reset();
		expect(this.senderBuffer).to.eql([0x5A, 0xA5, 0x7F, 0x00, 0x80]);
	});
});
